#+TITLE: Configuración de Emacs babelizada

* EMACS CONFIG
:PROPERTIES:
:header-args: elisp :tangle ~/.emacs :comments no :results none
:END:

Los bloques de código de dentro de este fichero están configurados para que, al guardarse este fichero, se construya una serie de archivos a partir de ellos que serán los *ficheros de configuración de Emacs*. Estos ficheros se ejecutan al iniciarse Emacs realizando toda la configuración.

Salvo que se especifique con una propiedad de tipo =header-args= los bloques de código irán a init.el.


** CONFIGURACIÓN PRE-CARGA
:PROPERTIES:
:header-args: elisp :tangle ~/.emacs.d/early-init.el :comments no :results none
:END:

El fichero =early-init.el= nos permite cargar configuraciones incluso antes de que se inicialicen ciertos aspectos fundamentales de Emacs, como los paquetes y el sistema gráfico.


*** Desactivar autorun del gestor de paquetes

Desactivamos la carga automática de paquetes al inicio ya que el gestor de paquetes se configura en init.

#+begin_src elisp
  (setq package-enable-at-startup nil)
  #+end_src

*** UTF-8 como codificación de texto por defecto

#+begin_src elisp
  (set-language-environment 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-keyboard-coding-system 'utf-8-unix)
  (set-terminal-coding-system 'utf-8-unix)
#+end_src

*** ANDROID: Permite a Emacs usar los binarios instalados en Termux

#+begin_src elisp
  (when (eq system-type 'android)
    (progn
      (setenv "PATH" (format "%s:%s" "/data/data/com.termux/files/usr/bin" (getenv "PATH")))
      (push "/data/data/com.termux/files/usr/bin" exec-path)
      (setq touch-screen-display-keyboard t)))
#+end_src

*** Declutter de la interfaz

Si se desactivan aquí los elementos de la interfaz que no se vayan a usar, no se cargan en ningún momento.

#+begin_src elisp
  (when (not (eq system-type 'android))
    (menu-bar-mode -1)                   ; Barra del menú
    (tool-bar-mode -1))                  ; Barra de herramientas
  
  (scroll-bar-mode -1)                   ; Scrollbar
  (tooltip-mode -1)                      ; Tooltips
#+end_src


** GESTIÓN DE PAQUETES

*** Repositorios de paquetes

Para instalar paquetes se necesita cargar el paquete interno =package=, e inicializarlo apuntando a los paquetes de repositorios que vayamos a usar.

Tras inicializarlo le indicamos también que solo intente refrescar la lista de paquetes disponibles cuando no haya una lista de paquetes ya guardada.

#+begin_src elisp
  (require 'cl-lib)
  (setq package-archives'(("melpa" . "https://melpa.org/packages/")))
  #+end_src

*** NO USAR BUILTIN ORG
Si hay desfase entre el Org que me traigo con el gestor de paquetes puede pasar que parte de Emacs se cargue referenciando a la versión de Org que tengo instalada por defecto. Un dolor de cabeza.

Quitamos las referencias a Org built-in y referenciamos a Straight.

#+begin_src elisp
;; Remove ALL Org paths (built-in or other) from load-path
(setq load-path
      (cl-remove-if 
       (lambda (path) 
         (or (string-match-p "/org\\(-[0-9.]+\\)?/" path)  ; Matches /org/ or /org-9.5/
             (string-match-p "emacs/lisp/org" path)))       ; Built-in Org
       load-path))

;; Add Elpaca's Org path explicitly (ensure it takes precedence)
(add-to-list 'load-path "~/.emacs.d/straight/build/org")
#+end_src

*** Straight

Gestor de paquetes que clona los paquetes desde los repositorios correspondientes y buildea los paquetes asíncronamente.

**** Bootstrap

#+begin_src elisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name
  	"straight/repos/straight.el/bootstrap.el"
  	(or (bound-and-true-p straight-base-dir)
  	    user-emacs-directory)))
        (bootstrap-version 7))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
  	(url-retrieve-synchronously
  	 "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
  	 'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+end_src

#+RESULTS:


**** [[https://github.com/jwiegley/use-package][USE-PACKAGE]] en Straight

El paquete =use-package= nos proporciona una macro =(use-package paquete [macro codigo])= que nos permite configurar nuestros paquetes de Emacs de una forma eficiente y ordenada a partir de este punto en la configuración.

Podemos usar esta macro en Straight.

- Con la variable =use-package-always-ensure= puesta a =t= se asegura que los paquetes a los que referencie con =use-package= se cargarán al iniciarse Emacs (eager loading).
  - Para no cargar paquetes específicos al inicio, podemos configurarlos con =(use-package paquete :ensure nil)=

- Algunas de las macros que se pueden ver en este fichero:
  - =:init= permite ejecutar código antes de la carga del paquete.
  - =:config= ejecuta código después de cargar el paquete.
  - =:after= asegura que el paquete se carga tras haber terminado la carga de los otros paquetes aquí especificados.

#+begin_src elisp
  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t)
#+end_src


** Carga preventiva de paquetes

Se cargan aquí paquetes que, de no cargarse con Straight al inicio del init, causarían problemas a causa de cargarse en su lugar la versión built-in (ej: Org carga la versión que trae Emacs en lugar de la que clonamos)

#+begin_src elisp
  (use-package org)
  (require 'org)
  (use-package transient)
  (require 'transient)
#+end_src


** NAVEGACIÓN

*** EVIL: Vim motions en Emacs

#+begin_src elisp

  (setq evil-want-integration t
  	  evil-want-keybinding nil
  	  evil-want-C-u-scroll t
  	  evil-want-C-i-jump nil)
    
  (use-package evil
    :config
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)
    ;; Usa los binds de la visual line fuera de sus buffers 
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)
    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal)
    (evil-mode 1))

  (use-package evil-collection
      :after evil
      :config
      (evil-collection-init))
#+end_src


*** DIRED: Exporador de ficheros de Emacs
**** Ocultar ficheros no interesantes
Oculta ficheros denominados como "no interesantes": auto-saves, backups, y otros ficheros.

#+BEGIN_SRC elisp
  (add-hook 'dired-mode-hook
	    (lambda ()
	      (dired-omit-mode)))
#+END_SRC


*** Historiales
**** Historial de ficheros recientes

#+BEGIN_SRC elisp
  (recentf-mode 1)
#+END_SRC

**** Historial de comandos recientes

A la hora de ejecutar un comando con =M-x= o ejecutar código con =M-;= podemos usar el historial de comandos con =M-n= y =M-p= de la misma manera que lo haríamos pulsando hacia arriba o abajo en un terminal de comandos. Este historial ignora contraseñas, btw.

- =history-length=: Para cada minibuffer se guardan los 10 ultimos valores usados.
  - El default para history-length es 100, pero tiene fama de ralentizar el sistema.

#+BEGIN_SRC elisp
  (setq history-length 10)
  (savehist-mode 1)
#+END_SRC


*** Buffers
**** Config general de buffers
***** Actualizar buffers abiertos si se detectan cambios
Aplica a todos los buffers de modos que no representen directamente ficheros (Ejemplo: Dired)
#+begin_src elisp
  (setq global-auto-revert-non-file-buffers t)
#+end_src

**** Buffers de ficheros
***** Actualizar buffers si se detectan cambios
Si un fichero abierto en un buffer cambia en disco, dicho buffer se actualiza para reflejar ese cambio.
Eso sí, si hay cambios sin guardar, pregunta antes si se quiere o no actualizar el buffer.

#+begin_src elisp
  (global-auto-revert-mode 1)
#+end_src

***** Recordar ultima posición del cursor al abrir un fichero

#+begin_src elisp
  (save-place-mode 1)
#+end_src


*** Otras configuraciones

**** Confirmar siempre con y o n, nunca con yes ni con no
  
#+begin_src elisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+end_src

**** No usar dialogs externos para ningún prompt
Todos los prompts de input se llevarán por Emacs.
#+begin_src elisp
  (setq use-dialog-box nil)
#+end_src

#+RESULTS:

**** El propio Emacs gestiona las requests de contraseña
#+begin_src elisp
  (setq epg-pinentry-mode 'loopback)
#+end_src



** AUTOCOMPLETADO

*** [[https://github.com/abo-abo/swiper?tab=readme-ov-file#ivy][IVY]]: Motor sencillo con Counsel y Swiper integrados

Este motor de autocompletado ofrece una interfaz sencilla de autocompletado usando minibuffers. Si se necesita un motor de búsqueda más eficiente y que ocupe la pantalla entera al parecer Helm es una buena alternativa.

Ivy por sí solo nos ofrece un sistema de filtrado flexible basado en regex y que soporta varios tipos de búsqueda (fuzzy matching, substring, prefix matching...). Pero además se integra con Counsel y Swiper para ofrecer una experiencia moderadamente intuitiva y fluida.

#+BEGIN_SRC elisp
  (use-package ivy
    :config (ivy-mode))
  (use-package swiper
    :after ivy)
#+END_SRC


*** [[https://github.com/abo-abo/swiper?tab=readme-ov-file#counsel][COUNSEL]]: El vanilla+ por excelencia

Counsel mejora varias de los comandos de Emacs integrando Ivy en la interfaz que ofrece. Para activar Counsel y que se sustituyan estos comandos en cuestión basta con ejecutar =(counsel-mode)=.

- Counsel viene incluido con Ivy.

#+BEGIN_SRC elisp
  (use-package counsel
    :after (ivy swiper)
    :config (counsel-mode))
#+END_SRC


*** [[https://github.com/Yevgnen/ivy-rich][IVY-RICH]]

Mejora de interfaz de Ivy, más informativa y configurable.

#+BEGIN_SRC elisp
  (use-package ivy-rich
    :after (ivy counsel)
    :config (ivy-rich-mode 1))
#+END_SRC



** AYUDA Y DOCUMENTACIÓN


*** [[https://github.com/Wilfred/helpful][HELPFUL]]: Ayuda más contextual

Sustituye varios de los comandos de ayuda de Emacs (y Counsel!) por otros que ofrecen información más contextual.

#+BEGIN_SRC elisp
  (use-package helpful
     :after counsel
     :custom
     ;; Comandos de ayuda de Counsel llamarán a las funciones de Helpful:
     (counsel-describe-function-function #'helpful-callable)
     (counsel-describe-variable-function #'helpful-variable))
#+END_SRC


*** [[https://github.com/justbur/emacs-which-key][WHICH-KEY]]: Descripción de las acciones asociadas a keybinds

Con which-key, se muestra ayuda en un minibuffer si empezamos a introducir una combinación de teclas y paramos cierto tiempo.
- =which-key-idle-delay= indica los segundos que tarda en aparecer la ayuda de which-key.

#+begin_src elisp
  (use-package which-key 
  :diminish which-key-mode
  :config
  (which-key-mode)
  ;; Tiempo que tarda en aparecer la ayuda
  (setq which-key-idle-delay 0.3))
#+end_src

** EBDB: Gestor de contactos

#+begin_src elisp
  (use-package ebdb)
#+end_src

** FORMATOS

*** PDF-TOOLS: Lector de ficheros PDF

#+begin_src elisp
  (use-package pdf-tools)
#+end_src



** PROGRAMACIÓN


*** [[https://github.com/magit/magit][MAGIT]]: CONFIGURACIÓN DE GIT

El paquete Magit es un wrapper de Git para Emacs.
- Cambiando la función de display de Magit a =magit-display-buffer-same-window-except-diff-v1=, el buffer de Magit ocupa todo el marco.

#+begin_src elisp
  (use-package magit
    :after transient
    :commands (magit-status magit-get-current-branch)
    :custom
    ;; Cuando visualizamos diffs en Magit, el buffer ocupa todo el frame
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
#+end_src


#+RESULTS:


*** PROJECTILE: GESTIÓN DE PROYECTOS

#+begin_src elisp
  (use-package projectile
  :diminish projectile-mode 
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :config
  (projectile-mode)
  ;; Cambiar de proyecto abre dired en el directorio del proyecto
  (setq projectile-switch-project-action #'projectile-dired)

  ;; Usa Ripgrep para búsquedas más rápidas (tiene que estar instalado en el sistema)
  (setq	projectile-generic-command "rg --files --hidden")

  ;; Usa Ivy para el autocompletado en los buffers de Projectile
  (setq	projectile-completion-system 'ivy))
#+end_src

**** [[https://github.com/ericdanan/counsel-projectile][COUNSEL-PROJECTILE]]: Integración de Ivy en los buffers de Projectile

#+begin_src elisp
  (use-package counsel-projectile                                  
    :config (counsel-projectile-mode))
#+end_src


*** MEJORAS VISUALES PARA LA PROGRAMACIÓN

#+begin_src elisp
  ;; Muestra números de línea. Con excepciones
 
  (global-display-line-numbers-mode t)
  (dolist (mode '(org-mode-hook
  		    org-agenda-mode-hook
  		    term-mode-hook
  		    shell-mode-hook
  		    eshell-mode-hook
  		    pdf-view-mode-hook
  		    Info-mode-hook))
    (add-hook mode (lambda() (display-line-numbers-mode 0))))

  ;; Paréntesis cambian de color para mayor legibilidad
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** INTERFAZ

*** DOOM-MODELINE: Línea de modos mejorada
La mode line, o línea de modos, es la línea horizontal que está en la 2ª posición empezando por abajo.
Esta línea muestra información como el modo de Emacs en el que estamos ahora mismo.
DOOM-ModeLine mejora visualmente la modeline y le añade información extra de utilidad.

#+begin_src elisp
    (use-package doom-modeline
      :custom ((doom-modeline-height 20))
      :config (doom-modeline-mode 1))

      ;; Muestra números de columna en la modeline
    (column-number-mode)

    ;; Iconos necesarios para DOOM-ModeLine
    (use-package all-the-icons                             
      :if (display-graphic-p))
#+end_src



*** TEMAS
Uso el tema =modus-vivendi=.

#+begin_src elisp
  (use-package autothemer
    :config
    ;; Tema alto personalizable
    ;; Para pillar más temas:
    ;; (use-package doom-themes)
    (load-theme 'modus-vivendi t))
#+end_src


*** CENTRADO DE TEXTO
Se centra el texto para los buffers de Org y org-agenda.

#+begin_src elisp
  (use-package olivetti
    :after org
    :config
    (setq-default olivetti-body-width 0.8)
    (add-hook 'org-mode-hook 'olivetti-mode))
#+end_src


*** GOLDEN-RATIO.EL: DIVISION DE VENTANAS

La ventana que se está editando se vuelve más grande que el resto automáticamente. Además, la división de ventanas tiene una proporción un poquito más normal.

#+begin_src elisp
  (use-package golden-ratio
    :config
    (golden-ratio-mode 1))
#+end_src


*** MEJORAS DEL RATÓN

Sigue siendo una herramienta útil por mucho que quiera evitarlo.
- =iscroll= es un paquete que permite scroll smooth en documentos con imágenes.

#+begin_src elisp
  (setq auto-window-vscroll nil)
  (use-package iscroll
    :config
    (iscroll-mode))
#+end_src


*** OTRAS CONFIGS DE INTERFAZ

#+begin_src elisp
  ;; Error de límite se comunica visualmente en lugar de con un sonido
  (setq visible-bell t)
  (set-fringe-mode 0)                    ; Activa los márgenes pero los esconde
#+end_src


** ORG: He aquí. He aquí la chicha.

#+begin_src elisp
  (with-eval-after-load 'org
    (require 'org-agenda)
    (require 'org-capture)
    
    (setq org-directory "~/org")
    (add-to-list 'org-modules 'org-habit))  
#+end_src

*** ORG-BABEL: PROGRAMACIÓN LITERARIA

**** LENGUAJES DE PROGRAMACIÓN

Carga =Elisp=, =Java=, =Python= y =SQL=.

#+begin_src elisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   
   '((emacs-lisp . t)
     (java . t)
     (python . t)
     (sql . t)))
#+end_src

**** SALTAR CONFIRMACIÓN PREVIA A EJECUTAR BLOQUES DE CÓDIGO

#+begin_src elisp
  (setq org-confirm-babel-evaluate nil)
#+end_src



*** ORG-AGENDA

**** FICHEROS DE ORG-AGENDA
Ficheros que se tendrán en cuenta a la hora de montar la agenda. De momento los ficheros de =~/org/gtd=.
#+begin_src elisp
  (setq org-agenda-files (list "~/org/gtd/inbox.org"           
			       "~/org/gtd/gtd.org"
			       "~/org/gtd/tickler.org"))
#+end_src

**** INTERFAZ DE LA AGENDA

***** Agenda diaria
La agenda por defecto muestra las entradas para un solo día en lugar de la agenda semanal por defecto.

#+begin_src elisp
  (setq org-agenda-span 1
	org-agenda-start-day "+0d")
#+end_src

***** Declutter visual
Configuración de los elementos de la agenda que se muestran o dejan de mostrar. Además quita las lineas que muestra org-agenda por defecto para montar un horario.

#+begin_src elisp
  ;; Abre org-agenda sin dividir la ventana
  (setq org-agenda-window-setup 'only-window)

  ;; Declutter, quita items ya hechos o duplicados
  (setq org-agenda-skip-timestamp-if-done t
  	org-agenda-skip-deadline-if-done t
  	org-agenda-skip-scheduled-if-done t
  	org-agenda-skip-scheduled-if-deadline-is-shown t
  	org-agenda-skip-timestamp-if-deadline-is-shown t)

  ;; Quita grid de horario de la vista de agenda
  (setq org-agenda-current-time-string ""
  	org-agenda-time-grid '((daily) () "" ""))

  ;; Muestra agenda con un par de saltos de línea
  (add-hook 'org-agenda-finalize-hook
  	  (lambda ()
  	    (goto-char (point-min))
  	    (insert "\n\n")))
#+end_src



*** ORG-TODO

- =org-use-fast-todo-selection= determina cuándo mostrar el menú de selección para org-todo. =auto= se salta este menu cuando se invoca a org-todo con argumentos de estado.
- =org-todo-keywords= determina los posibles estados de los TODOs.

#+begin_src elisp
  (setq
   org-use-fast-todo-selection 'prefix
   org-todo-keywords
   '((sequence ; FLOW PRINCIPAL DE TAREAS
      "TODO(t)" ; Hacer luego
      "NEXT(n)" ; En proceso/siguiente
      "|"
      "DONE(d)" ; Hecho
      )
     (sequence ; FLOW BACKLOG
      "WAIT(w)" ; A la espera de algo externo
      "HOLD(h)" ; A la espera por motu propio
      "IDEA(i)" ; Para atajar algún día
      "|"
      "NOTE(o@/!)" ; No es TODO; solo para trackear
      "STOP(s@/!)" ; Estado final para cancelar
      )))
#+end_src
*** ORG-CAPTURE

- =org-default-notes-file=: Fichero destinatario de las nuevas capturas por defecto.

#+begin_src elisp
  (with-eval-after-load 'org
  (setq org-default-notes-file (concat org-directory "/gtd/inbox.org")))
#+end_src

#+RESULTS:
: ~/org/gtd/inbox.org

**** PLANTILLAS DE ORG-CAPTURE
Algunas por aquí, otras por fichero externo.

#+begin_src elisp
  (setq org-capture-templates
	'(("t" "TODO" entry (file+headline "~/org/gtd/gtd.org" "INBOX")
	   "** TODO %?"
	   :empty-lines-after 1)

	  ("c" "Cita" entry (file+headline "~/org/gtd/gtd.org" "INBOX")
	   "** %?\n SCHEDULED: %^T"
	   :empty-lines-after 1)

	  ("d" "TODO con deadline" entr (file+headline "~/org/gtd/gtd.org" "INBOX")
	   "** TODO %?\n DEADLINE: %^T"
	   :empty-lines-after 1)))
#+end_src

*** TARGETS PARA ORG-REFILE
A la hora de hacer org-refile se cargan los headings de los ficheros de la agenda para permitir fácil reagendado.

#+begin_src elisp
  (setq org-refile-targets
        '((nil :maxlevel . 2)
  	(org-agenda-files :maxlevel . 2)))
#+end_src

*** ORG-ROAM
Gestor de información con backlincks basado en Emacs Lisp y sostenido por SQLite.

- =org-roam-directory= para indicar la carpeta donde se guardan las notas de Roam.
- =org-roam-completion-everywhere= a =t= activa el autocompletado de Roam para links que no son de Org.
- =org-roam-dailies= nos ofrece funcionalidad para tener notas diarias en org-roam. 

#+begin_src elisp
  (use-package org-roam
    :after org
    :custom
    (org-roam-directory "~/org/roam")
    (org-roam-completion-everywhere t)
    :config
    (require 'org-roam-dailies)
    (org-roam-setup)
    (org-roam-db-autosync-mode))
#+end_src



*** ORG-MODERN
Mejora visual de los elementos de Org-Mode

#+begin_src elisp
  (use-package org-modern
    :after org
    :config
    (global-org-modern-mode))
#+end_src


*** ORG-HABIT: Tareas repetidas

*** Otras configuraciones

- =org-extend-today-until=: Indicar hora específica para avanzar las entradas al día siguiente.
  Perfecto para quedarme hasta las tantas y seguir guardando sobre el día anterior.
- =org-hide-emphasis-markers=: Elimina *caracteres* _de_ =énfasis=.

#+begin_src elisp
  (setq org-extend-today-until 6
	org-hide-emphasis-markers t)
#+end_src

**** Escalado automático de imágenes

- =org-image-actual-width=: Determina el ancho de las imágenes en la pantalla.

#+begin_src elisp
  (setq org-image-actual-width nil)
#+end_src


** YASNIPPET: Plantillas para todo

#+begin_src elisp
  (use-package yasnippet
    :config
    (setq yas-snippet-dirs '("~/.emacs.d/snippets"))
    (yas-global-mode 1))
#+end_src

** ATAJOS DE TECLADO: [[https://github.com/noctuid/general.el][GENERAL.EL]] y [[https://github.com/abo-abo/hydra][HYDRA]]

- [[https://github.com/noctuid/general.el][General.el]] ofrece una forma sencilla de establecer keybinds a traves de todo Emacs.
  A lo largo de la config se definen binds con =(general-def "keybind" 'funcion["keybind2" 'funcion2[... "keybindN" 'funcionN]])=

- [[https://github.com/abo-abo/hydra][Hydra]] brinda atajos stackeables: Activar una hidra permite establecer "mini-modos" con los que ejecutar otros comandos en rápida sucesión.

#+begin_src elisp
  (use-package general)
  (use-package hydra)
#+end_src

*** REMAPEOS

  #+begin_src elisp
    (eval-after-load 'general
      (general-def
       [remap describe-function]      'counsel-describe-function
       [remap describe-command]       'helpful-command
       [remap describe-variable]      'counsel-describe-variable
       [remap describe-key]           'helpful-key))
  #+end_src

*** ATAJOS GENERALES
Valga la redundancia culpa del nombre del paquete usado para los atajos, aqui van atajos que aplican a todo Emacs en cuanto a funcionalidad que no encajo en otros sitios.

- *CANCELAR*: =Esc=
  Por defecto, el keybind para la función general de cancelar (=keyboard-escape-quit=), está asociada a =C-g=.

  #+begin_src elisp
  (general-def
    "<escape>" 'keyboard-escape-quit)
  #+end_src


*** ATAJOS DE IVY

#+begin_src elisp
  (general-def
    ;; Control-F a lo bestia
    "C-s"      'swiper
    ;; Cambio rápido de buffer
    "C-M-j"    'counsel-switch-buffer)

  (general-def
    :keymaps   'ivy-minibuffer-map
    "TAB"      'ivy-alt-done
    "C-L"      'ivy-alt-done
    "C-j"      'ivy-next-line
    "C-k"      'ivy-previous-line)

  (general-def
    :keymaps   'ivy-switch-buffer-map
    "C-k"      'ivy-previous-line
    "C-l"      'ivy-done
    "C-d"      'ivy-switch-buffer-kill)

  (general-def
    :keymaps   'ivy-reverse-i-search-map
    "C-k"      'ivy-previous-line
    "C-d"      'ivy-reverse-i-search-kill)
#+end_src

#+RESULTS:


*** ATAJOS PARA PROGRAMACIÓN

**** ATAJOS DE ORG-BABEL: C-c b

- =org-babel-execute-src-block-maybe= (=C-c b e c=): Ejecuta el bloque de código sobre el que esté el cursor, de ser posible.
- =org-babel-execute-subtree= (=C-c b e s=): Ejecuta todos los bloques de código bajo un encabezado de Org.
- =org-babel-execute-buffer= (=C-c b e b=): Ejecuta todos los bloques de código del buffer.

#+begin_src elisp
  (general-def
    :prefix "C-c b"
    ""  '(:ignore t :which-key "org-babel")
    "e" '(:ignore t :which-key "execute")
    "ec" 'org-babel-execute-src-block-maybe
    "es" 'org-babel-execute-subtree
    "eb" 'org-babel-execute-buffer)
#+end_src


*** ATAJOS DE ORG

- =org-store-link= (=C-c l=): Guarda en el kill ring un enlace a el punto sobre el que se está posicionado.
- =org-agenda= (=C-c a=): Abre la agenda Org.
  - Dentro de la agenda, =C-c C-x C-t= marca una tarea como completa.
- =org-capture= (=C-c c=): Inicia org-capture para la captura de información.

#+begin_src elisp
  (general-def
    "C-c l" 'org-store-link
    "C-c a" 'org-agenda
    "C-c c" 'org-capture)

  (general-def
    :keymaps 'org-roam-dailies-map
    "Y" 'org-roam-dailies-capture-yesterday
    "T" 'org-roam-dailies-capture-tomorrow)

  (general-def
    :prefix "C-c n"
    "" '(:ignore t :which-key "org-roam")
    "l" 'org-roam-buffer-toggle
    "f" 'org-roam-node-find
    "i" 'org-roam-node-insert
    "d" '(:keymap org-roam-dailies-map :which-key "Daily notes" :package org-roam))


  (general-def
    :keymaps 'org-agenda-mode-map
    "C-c C-x C-t" 'org-agenda-toggle-completed)

  (general-def
      :keymaps 'org-mode-map
      "C-M-i"  'completion-at-point)
#+end_src


*** HIDRAS

**** ZOOM IN/OUT: C-M-z

#+begin_src elisp
  (defhydra hydra-zoom (:timeout 4)
    "scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ;; :exit a true finaliza la hydra.
    ("f" nil "finished" :exit t))

  ;; Asigna atajo a la hydra.
  (general-def
    "C-M-z" '(hydra-zoom/body :which-key "Zoom in or out text"))
#+end_src


** FUNCIONES

*** FUNCIONES CUSTOM

- =org-timestamp-weekdayp= acepta una fecha y devuelve T si el día de la semana especificado es laborable.
  Útil para definir timestamps que solo apliquen bien L-V o fines de semana.
  - Para usarlo: =SCHEDULED: <%%(org-timestamp-weekdayp date)>=

#+begin_src elisp
  (defun org-timestamp-weekdayp (date)
    "Return `t` if DATE is a workday (Monday to Friday)."
    (let ((day-of-week (calendar-day-of-week date)))
      (member day-of-week '(1 2 3 4 5))))
     #+end_src


- =org-agenda-toggle-completed= muestra u oculta los items ya completados en la agenda.

#+begin_src elisp
  (defun org-agenda-toggle-completed ()
    "Toggles visibility for done TODO items."
    (interactive)
    (setq org-agenda-skip-timestamp-if-done (not org-agenda-skip-timestamp-if-done)
	  org-agenda-skip-scheduled-if-done (not org-agenda-skip-scheduled-if-done)
	  org-agenda-skip-deadline-if-done (not org-agenda-skip-deadline-if-done))
    (org-agenda-redo))
#+end_src




*** ENLACES
Definición de enlaces con acciones personalizadas.

**** exec-block: EJECUTAR BLOQUES CODIGO

#+begin_src elisp
  (org-link-set-parameters
   "exec-block"
   :follow #'org-babel-ref-resolve)
#+end_src



** CUSTOMIZACIÓN
Las variables customizadas se guardan en fichero aparte que se carga en inicialización.

#+begin_src elisp
  (setq custom-file (locate-user-emacs-file "custom-vars.el"))
  (load custom-file 'noerror 'nomessage)
#+end_src


** CONFIGS ESPECIFICAS: SEPARANDO CURRO DE CASA

#+begin_src elisp
  (if (string= (getenv "WORK-EMACS") "Y")
      (load (locate-user-emacs-file "work-init.el"))
    (load (locate-user-emacs-file "personal-init.el")))
  #+end_src


** CONFIGS. POR SISTEMA

Al finalizar la ejecución del fichero init.el principal, pasamos a cargar configuraciones específicas de dispositivo.

#+begin_src elisp
  (cond
   ((and (eq system-type 'gnu/linux) (file-exists-p "/etc/wsl.conf"))
    (load (locate-user-emacs-file "wsl-init.el")))
   ((eq system-type 'windows-nt)
    (load (locate-user-emacs-file "win-init.el")))
   ((eq system-type 'android)
    (load (locate-user-emacs-file "android-init.el"))))  
#+end_src


**** FUENTES

#+begin_src elisp
  (set-face-attribute 'default nil :family "CaskaydiaMono NFP" :height 150)
#+end_src

#+RESULTS:


*** CONFIG. ANDROID
:PROPERTIES:
:header-args: elisp :tangle ~/.emacs.d/android-init.el :comments no
:END:

**** Teclado en pantalla

#+begin_src elisp
  ;; (setq touch-screen-display-keyboard t)  
#+end_src

** VARIABLES LOCALES

Este código se ejecuta *al abrir este fichero de configuración*, y permite que la configuración se auto-exporte a los ficheros que usa Emacs al guardarse.

Este fichero SOLO hará tangle si se abre desde Android

# Local Variables:
# eval: (progn
#         (setq my-tangle-hook
#               (lambda () (when (and
#                                 (eq system-type 'android)
#                                 (string-equal (buffer-file-name) (expand-file-name "~/.config/emacs/config.org")))
#                            (org-babel-tangle))))
#         (add-hook 'after-save-hook my-tangle-hook nil t)
#         (add-hook 'kill-buffer-hook
#                   (lambda () (remove-hook 'after-save-hook my-tangle-hook)) nil t))
# End:
